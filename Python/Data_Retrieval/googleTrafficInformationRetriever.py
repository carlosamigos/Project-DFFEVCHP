# -*- coding: utf-8 -*-
import simplejson, urllib.request as urlReq
import time

API_KEY_1 = "AIzaSyBMQAmCiWBwO1VznaTzEiNAEyoAUr2xzGM"
API_KEY_2 = "AIzaSyBK2KN_jQS6ygFfU1UaMjG8CA8vhjeV10k"
API_KEY_3 = "AIzaSyBLDdoYQf9BzJGHsRyC4W2-O4gMcHR2gIo"
API_KEY_4 = "AIzaSyCV5xFdq7ryUjSFB_vcXCOGQihe187mf8c"
API_KEY_5 = "AIzaSyD5odmEyjx4nlp_0K4MvctJ6h2ApMWyhlY"
API_KEY_6 = "AIzaSyDZtCQvBvwHH3UPunJDeNnC7itYKSmdx-c"
API_KEY_7 = "AIzaSyCfjoVZRR8I1OBBCC3Kqr_KkKw52C2-jfQ"
CARLSAPIKEY = "AIzaSyAxdMRQLj-4T6EoYL34zgVEet8G3UGb0kc"


def cleanCalculateTravelTimeMatrixFromCoordVector(coordVector, transportType, apikey, writeToFile):
	numberOfCoordinates = len(coordVector)
	secondMatrix = [[0 for i in range(numberOfCoordinates)] for j in range(numberOfCoordinates)]
	numberOfQueries = 0
	totalQueries = 0
	for i in range(numberOfCoordinates):
		origin = makeStringListFromCoordinateVector([coordVector[i]])
		for j in range(numberOfCoordinates):
			if(numberOfQueries > 99):
				time.sleep(1)
				numberOfQueries = 0
			destination = makeStringListFromCoordinateVector([coordVector[j]])
			url = "https://maps.googleapis.com/maps/api/distancematrix/json?origins=" + origin + "&destinations=" + destination + "&key=" + apikey + "&mode=" + transportType
			response = urlReq.urlopen(url)
			data = simplejson.load(response)
			if ("error_message" in data.keys()):
				print(data["error_message"])
				return secondMatrix
			seconds = data["rows"][0]["elements"][0]["duration"]["value"]
			secondMatrix[i][j] = seconds
			numberOfQueries += 1
			totalQueries += 1
			print(totalQueries)
	if(writeToFile):
		writeMatrixToFile(secondMatrix,transportType)
		print(secondMatrix)
def writeMatrixToFile(matrix, transportType):
    if transportType == "":
        transportType = "car"
    fil = open("travelTimes_" + transportType + ".txt", "w")
    writeString = ""
    for row in matrix:
        for elem in row:
            writeString += str(elem) + " "
        writeString = writeString[:-1] + "\n"
    fil.write(writeString[:-1])
    fil.close()


def makeStringListFromCoordinateVector(coordVector):
    ret = ""
    for coor in coordVector:
        ret += str(coor[0]) + "," + str(coor[1]) + "|"
    ret = ret[:-1]
    return ret




def run(coordVector, transportType, writeToFile):
    apikey = CARLSAPIKEY
    print("number of coordinates", len(coordVector))
    return cleanCalculateTravelTimeMatrixFromCoordVector(coordVector, transportType, apikey, writeToFile)

coordVector = [(59.95245396666667, 10.686117766666667), (59.95245396666667, 10.6952993), (59.95245396666667, 10.704480833333333), (59.95245396666667, 10.713662366666668), (59.95245396666667, 10.7228439), (59.95245396666667, 10.732025433333334), (59.95245396666667, 10.741206966666667), (59.95245396666667, 10.7503885), (59.95245396666667, 10.759570033333334), (59.95245396666667, 10.768751566666667), (59.95245396666667, 10.7779331), (59.95245396666667, 10.787114633333333), (59.95245396666667, 10.796296166666666), (59.95245396666667, 10.8054777), (59.95245396666667, 10.814659233333334), (59.9491519, 10.686117766666667), (59.9491519, 10.6952993), (59.9491519, 10.704480833333333), (59.9491519, 10.713662366666668), (59.9491519, 10.7228439), (59.9491519, 10.732025433333334), (59.9491519, 10.741206966666667), (59.9491519, 10.7503885), (59.9491519, 10.759570033333334), (59.9491519, 10.768751566666667), (59.9491519, 10.7779331), (59.9491519, 10.787114633333333), (59.9491519, 10.796296166666666), (59.9491519, 10.8054777), (59.9491519, 10.814659233333334), (59.945849833333334, 10.686117766666667), (59.945849833333334, 10.6952993), (59.945849833333334, 10.704480833333333), (59.945849833333334, 10.713662366666668), (59.945849833333334, 10.7228439), (59.945849833333334, 10.732025433333334), (59.945849833333334, 10.741206966666667), (59.945849833333334, 10.7503885), (59.945849833333334, 10.759570033333334), (59.945849833333334, 10.768751566666667), (59.945849833333334, 10.7779331), (59.945849833333334, 10.787114633333333), (59.945849833333334, 10.796296166666666), (59.945849833333334, 10.8054777), (59.945849833333334, 10.814659233333334), (59.942547766666664, 10.686117766666667), (59.942547766666664, 10.6952993), (59.942547766666664, 10.704480833333333), (59.942547766666664, 10.713662366666668), (59.942547766666664, 10.7228439), (59.942547766666664, 10.732025433333334), (59.942547766666664, 10.741206966666667), (59.942547766666664, 10.7503885), (59.942547766666664, 10.759570033333334), (59.942547766666664, 10.768751566666667), (59.942547766666664, 10.7779331), (59.942547766666664, 10.787114633333333), (59.942547766666664, 10.796296166666666), (59.942547766666664, 10.8054777), (59.942547766666664, 10.814659233333334), (59.9392457, 10.686117766666667), (59.9392457, 10.6952993), (59.9392457, 10.704480833333333), (59.9392457, 10.713662366666668), (59.9392457, 10.7228439), (59.9392457, 10.732025433333334), (59.9392457, 10.741206966666667), (59.9392457, 10.7503885), (59.9392457, 10.759570033333334), (59.9392457, 10.768751566666667), (59.9392457, 10.7779331), (59.9392457, 10.787114633333333), (59.9392457, 10.796296166666666), (59.9392457, 10.8054777), (59.9392457, 10.814659233333334), (59.93594363333333, 10.686117766666667), (59.93594363333333, 10.6952993), (59.93594363333333, 10.704480833333333), (59.93594363333333, 10.713662366666668), (59.93594363333333, 10.7228439), (59.93594363333333, 10.732025433333334), (59.93594363333333, 10.741206966666667), (59.93594363333333, 10.7503885), (59.93594363333333, 10.759570033333334), (59.93594363333333, 10.768751566666667), (59.93594363333333, 10.7779331), (59.93594363333333, 10.787114633333333), (59.93594363333333, 10.796296166666666), (59.93594363333333, 10.8054777), (59.93594363333333, 10.814659233333334), (59.93264156666667, 10.686117766666667), (59.93264156666667, 10.6952993), (59.93264156666667, 10.704480833333333), (59.93264156666667, 10.713662366666668), (59.93264156666667, 10.7228439), (59.93264156666667, 10.732025433333334), (59.93264156666667, 10.741206966666667), (59.93264156666667, 10.7503885), (59.93264156666667, 10.759570033333334), (59.93264156666667, 10.768751566666667), (59.93264156666667, 10.7779331), (59.93264156666667, 10.787114633333333), (59.93264156666667, 10.796296166666666), (59.93264156666667, 10.8054777), (59.93264156666667, 10.814659233333334), (59.9293395, 10.686117766666667), (59.9293395, 10.6952993), (59.9293395, 10.704480833333333), (59.9293395, 10.713662366666668), (59.9293395, 10.7228439), (59.9293395, 10.732025433333334), (59.9293395, 10.741206966666667), (59.9293395, 10.7503885), (59.9293395, 10.759570033333334), (59.9293395, 10.768751566666667), (59.9293395, 10.7779331), (59.9293395, 10.787114633333333), (59.9293395, 10.796296166666666), (59.9293395, 10.8054777), (59.9293395, 10.814659233333334), (59.926037433333335, 10.686117766666667), (59.926037433333335, 10.6952993), (59.926037433333335, 10.704480833333333), (59.926037433333335, 10.713662366666668), (59.926037433333335, 10.7228439), (59.926037433333335, 10.732025433333334), (59.926037433333335, 10.741206966666667), (59.926037433333335, 10.7503885), (59.926037433333335, 10.759570033333334), (59.926037433333335, 10.768751566666667), (59.926037433333335, 10.7779331), (59.926037433333335, 10.787114633333333), (59.926037433333335, 10.796296166666666), (59.926037433333335, 10.8054777), (59.926037433333335, 10.814659233333334), (59.922735366666664, 10.686117766666667), (59.922735366666664, 10.6952993), (59.922735366666664, 10.704480833333333), (59.922735366666664, 10.713662366666668), (59.922735366666664, 10.7228439), (59.922735366666664, 10.732025433333334), (59.922735366666664, 10.741206966666667), (59.922735366666664, 10.7503885), (59.922735366666664, 10.759570033333334), (59.922735366666664, 10.768751566666667), (59.922735366666664, 10.7779331), (59.922735366666664, 10.787114633333333), (59.922735366666664, 10.796296166666666), (59.922735366666664, 10.8054777), (59.922735366666664, 10.814659233333334), (59.9194333, 10.686117766666667), (59.9194333, 10.6952993), (59.9194333, 10.704480833333333), (59.9194333, 10.713662366666668), (59.9194333, 10.7228439), (59.9194333, 10.732025433333334), (59.9194333, 10.741206966666667), (59.9194333, 10.7503885), (59.9194333, 10.759570033333334), (59.9194333, 10.768751566666667), (59.9194333, 10.7779331), (59.9194333, 10.787114633333333), (59.9194333, 10.796296166666666), (59.9194333, 10.8054777), (59.9194333, 10.814659233333334), (59.91613123333333, 10.686117766666667), (59.91613123333333, 10.6952993), (59.91613123333333, 10.704480833333333), (59.91613123333333, 10.713662366666668), (59.91613123333333, 10.7228439), (59.91613123333333, 10.732025433333334), (59.91613123333333, 10.741206966666667), (59.91613123333333, 10.7503885), (59.91613123333333, 10.759570033333334), (59.91613123333333, 10.768751566666667), (59.91613123333333, 10.7779331), (59.91613123333333, 10.787114633333333), (59.91613123333333, 10.796296166666666), (59.91613123333333, 10.8054777), (59.91613123333333, 10.814659233333334), (59.91282916666667, 10.686117766666667), (59.91282916666667, 10.6952993), (59.91282916666667, 10.704480833333333), (59.91282916666667, 10.713662366666668), (59.91282916666667, 10.7228439), (59.91282916666667, 10.732025433333334), (59.91282916666667, 10.741206966666667), (59.91282916666667, 10.7503885), (59.91282916666667, 10.759570033333334), (59.91282916666667, 10.768751566666667), (59.91282916666667, 10.7779331), (59.91282916666667, 10.787114633333333), (59.91282916666667, 10.796296166666666), (59.91282916666667, 10.8054777), (59.91282916666667, 10.814659233333334), (59.9095271, 10.686117766666667), (59.9095271, 10.6952993), (59.9095271, 10.704480833333333), (59.9095271, 10.713662366666668), (59.9095271, 10.7228439), (59.9095271, 10.732025433333334), (59.9095271, 10.741206966666667), (59.9095271, 10.7503885), (59.9095271, 10.759570033333334), (59.9095271, 10.768751566666667), (59.9095271, 10.7779331), (59.9095271, 10.787114633333333), (59.9095271, 10.796296166666666), (59.9095271, 10.8054777), (59.9095271, 10.814659233333334), (59.906225033333335, 10.686117766666667), (59.906225033333335, 10.6952993), (59.906225033333335, 10.704480833333333), (59.906225033333335, 10.713662366666668), (59.906225033333335, 10.7228439), (59.906225033333335, 10.732025433333334), (59.906225033333335, 10.741206966666667), (59.906225033333335, 10.7503885), (59.906225033333335, 10.759570033333334), (59.906225033333335, 10.768751566666667), (59.906225033333335, 10.7779331), (59.906225033333335, 10.787114633333333), (59.906225033333335, 10.796296166666666), (59.906225033333335, 10.8054777), (59.906225033333335, 10.814659233333334)]
transportType = "car" #transit, bicycling
writeToFile = True
run(coordVector, transportType,writeToFile)


