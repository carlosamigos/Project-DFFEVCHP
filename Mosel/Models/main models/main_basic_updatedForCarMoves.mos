model DVFFEVRP

!options explterm
!options noimplicit

uses "mmxprs";

parameters
	DataFile = 'test_6nodes_3so_2c_4mov_2charging_1finishes_0MODE_a.txt';
	OutputPathRegular = "outputServiceOperatorsPath.txt";
	OutputPathArtificial = "outputArtificialServiceOperators.txt";
	printParams = true;
	printResults = true;
	writeToFile = true;
	MaxSolveTimeSeconds = 600;
end-parameters


(! ### Start of initialization of set sizes ### !)

(!
This is the main model 
!)

declarations
	numPNodes        :	integer; ! Number of parking Nodes
	numDeficitNodes  :	integer; ! Number of deficit parking nodes
	numCNodes        :	integer; ! Number of charging Nodes
	numRNodes        :	integer; ! Number of real Nodes
	numNodes         :	integer; ! Total number of Nodes
	numROperators    :  integer; ! Number of real operators
	numCarMovesP     :  integer; ! Number of car moves to parking nodes
	numCarMovesC     :  integer; ! Number of car moves to charging nodes
	numCars          :  integer; ! Number of cars 
	numTasks         :  integer  ! Number of taks
end-declarations

initializations from DataFile
	numPNodes;
	numDeficitNodes;
	numCNodes;
	numROperators;
	numCarMovesP;
	numCarMovesC;
	numCars;
	numTasks;
end-initializations

! ### End of initialization of set sizes ### !


! ### Start of declaration of sets ### !
declarations
	Nodes             : set of integer; ! Set of all Nodes
	pNodes            : set of integer; ! Set of all parking Nodes. A subset of Nodes. Surplus first, then deficit
	cNodes     		  : set of integer; ! Set of all charging Nodes. A subset of Nodes.
	rOperators        : set of integer; ! Set of all real operators.
	tasks             : set of integer; ! Set of all possible visits
	cars              : set of integer; ! Set of all cars 
	carMoves          : set of integer; ! Set of all car moves
	carMovesP         : set of integer; ! Set of car moves that ends in parking nodes
	carMovesC         : set of integer; ! Set of car moves that ends in charging nodes
	
end-declarations


! Initialize all node sets ! 
numNodes          := numCNodes + numPNodes;
pNodes            := 1 .. numPNodes;
cNodes   	      := (numPNodes + 1) .. numNodes;
Nodes    	      := pNodes + cNodes;

! Initialize operator sets !
rOperators := 1 .. numROperators;

! Initialize all tasks !
tasks             := 1 .. numTasks;

! Initialize all car sets !
cars              := 1 .. numCars;

! Initialize all carMove sets !
numCarMoves       := numCarMovesP + numCarMovesC;
carMovesP         :=  1 .. numCarMovesP;
carMovesC         := (numCarMovesP + 1) .. numCarMoves;
carMoves          := carMovesP + carMovesC;

! ### End of initialization of sets ### !


if printParams then
	writeln('------ Counts ------');
	writeln('Number of Nodes:                ', numNodes);
	writeln('Number of deficit Nodes:        ', numDeficitNodes);
	writeln('Number of parking Nodes:        ', numPNodes);
	writeln('Number of charging Nodes:       ', numCNodes);
	
	writeln('');
	writeln('------ Sets ------');
	writeln('All Nodes:               ', Nodes);
	writeln('Parking Nodes:           ', pNodes);
	writeln('Charging Nodes:          ', cNodes);
	writeln('Operators:               ', rOperators);
	writeln('');
end-if


! ### Start of declaration of Parameters ### !
declarations
	! Operator !
	originNodeROperator       : array(rOperators) of integer; ! Origin Nodes for all real operators
	destinationNodeROperator  : array(rOperators) of integer; ! Artificial destination node of real operators
	startNodeROperator        : array(rOperators) of integer; ! Actual start node for real operators
	
	! Node references:  !
	deficitNodes              : array(1..numDeficitNodes) of integer;
	deficitCars               : array(1..numDeficitNodes) of integer;
	
	! Car moves !
	carMoveCars               : array(carMoves) of integer;
	carMoveOrigin             : array(carMoves) of integer;
	carMoveDestination        : array(carMoves) of integer;
	 
	! Costs !
	costOfDeviation           : real; 
	costOfPostponedCharging   : real;
	costOfExtraTime           : real;
	costOfTravel              : real;
	costOfTravelH			  : real;
	
	! Times !
	carMoveHandlingTime    	  : array(carMoves)      of real;
	carMoveStartingTime 	  : array(carMoves)		of real;
	travelTimeBike      	  : array(Nodes,Nodes)   of real;
	travelTimeToOriginR  	  : array(rOperators)    of real;
	timeLimit            	  : real;
	timeLimitLastVisit   	  : real;
	
	chargingSlotsAvailable    : array(cNodes)     of integer; ! Available charging slots at charging Nodes
	
	!Objective function
	mode 					  : integer;
	
end-declarations

initializations from DataFile
	originNodeROperator;
	destinationNodeROperator;
	startNodeROperator;
	deficitNodes;
	deficitCars;
	carMoveCars;
	carMoveOrigin;
	carMoveDestination;
	costOfDeviation;
	costOfPostponedCharging;
	costOfExtraTime;
	costOfTravel;
	costOfTravelH;
	carMoveHandlingTime;
	carMoveStartingTime;
	travelTimeBike;
	travelTimeToOriginR;
	timeLimit;
	timeLimitLastVisit;
	chargingSlotsAvailable;
	mode;
end-initializations
! ### End of initialization of Parameters ### !

if printParams then
	writeln('------ Parameters ------');
	writeln('Origin Nodes for real operators:                                         ', originNodeROperator);
	writeln('Destination Nodes for real operators:                                    ', destinationNodeROperator);
	writeln('Actual starting node for real operators:                                 ', startNodeROperator);
	writeln('Origin Nodes for real operators:                                         ',originNodeROperator);
	writeln('Destination Nodes for real operators:                                    ',destinationNodeROperator);
	writeln('Actual starting node for real operators:                                 ',startNodeROperator);
	writeln('Available slots at charging stations:                                    ',chargingSlotsAvailable);
	writeln('Cost per vehicle deviation in each node:                                 ',costOfDeviation);
	writeln('Cost of extra time:                                                      ',costOfExtraTime);
	writeln('Cost per vehicle of postponing chargning:                                ',costOfPostponedCharging);
	writeln('Travel times between real Nodes using bikes:                             ',travelTimeBike);
	writeln('Time limit for planning period:                                          ',timeLimit);
	writeln('Time limit for last visit:                                               ',timeLimitLastVisit);
	writeln('Remaining travel time to origin node for real operators:                 ',travelTimeToOriginR);
	writeln('Deficit nodes:                                                           ',deficitNodes);
	writeln('Deficit cars:                                                            ',deficitCars);
	writeln('CarMove cars:                                                            ',carMoveCars);
	writeln('CarMove origin:                                                          ',carMoveOrigin);
	writeln('CarMove destination:                                                     ',carMoveDestination);
	
end-if


! ### Start of declaration of Variables ### !

declarations
	x         : dynamic array(rOperators, carMoves, tasks)  of mpvar;
	t         : dynamic array(rOperators, tasks)            of mpvar;
	t_plus    : dynamic array(rOperators)                   of mpvar;
	t_minus   : dynamic array(rOperators)                   of mpvar;
	s_minus   : dynamic array(pNodes)                       of mpvar;
	s_c       : dynamic array(pNodes)                       of mpvar;				
end-declarations

! ### End of declaration of Variables ### !

! ### Start of creation of Variables ### !

forall(pp in rOperators, rr in carMoves, mm in tasks) do 
	create(x(pp,rr,mm));
	x(pp,rr,mm) is_binary;
end-do

forall(pp in rOperators, mm in tasks) do 
	create(t(pp,mm));
	t(pp,mm) is_semcont 0;
end-do

forall(pp in rOperators) do 
	create(t_plus(pp));
	t_plus(pp) is_semcont 0;
	create(t_minus(pp));
	t_minus(pp) is_semcont 0;
end-do

forall(ii in pNodes) do 
	create(s_minus(ii));
	s_minus(ii) is_semint 0;
	create(s_c(ii));
	s_c(ii) is_semint 0;
end-do

! ### End of creation of Variables ### !


! ### Start of declaration of OBJECTIVE ### !
declarations
		Objective: linctr;
end-declarations

Objective := costOfDeviation * sum(ii in pNodes) s_minus(ii) + 
			  costOfPostponedCharging * sum(ii in pNodes) s_c(ii) + 
			  costOfExtraTime * sum(pp in rOperators) t_plus(pp) + 
			  costOfTravelH  * sum(pp in rOperators, rr in carMoves, mm in tasks) x(pp,rr,mm);

! ### End of declaration of objective ### !	

end-model